#+Title: 
#+Author: Mark Armstrong
#+Description: 

* Day 1 – The Tyranny of the Rocket Equation

** Part 1

*** The narrative

Santa has become stranded at the edge of the Solar System while delivering
presents to other planets! To accurately calculate his position in space,
safely align his warp drive, and return to Earth in time to save Christmas,
he needs you to bring him measurements from fifty stars.

Collect stars by solving puzzles. Two puzzles will be made available on
each day in the Advent calendar; the second puzzle is unlocked when you
complete the first. Each puzzle grants one star. Good luck!

The Elves quickly load you into a spacecraft and prepare to launch.

At the first Go / No Go poll, every Elf is Go until the Fuel Counter-Upper.
They haven't determined the amount of fuel required yet.

Fuel required to launch a given module is based on its mass. Specifically,
to find the fuel required for a module, take its mass, divide by three,
round down, and subtract 2.

For example:

- For a mass of 12, divide by 3 and round down to get 4, then subtract 2
  to get 2.
- For a mass of 14, dividing by 3 and rounding down still yields 4, so the
  fuel required is also 2.
- For a mass of 1969, the fuel required is 654.
- For a mass of 100756, the fuel required is 33583.

The Fuel Counter-Upper needs to know the total fuel requirement. To find it,
individually calculate the fuel needed for the mass of each module
(your puzzle input), then add together all the fuel values.

What is the sum of the fuel requirements for all of the modules on your
spacecraft?

*** The input

#+name: my-day1-input
|--------|
| 121165 |
|  64000 |
| 119723 |
|  91886 |
|  63259 |
|  85729 |
|  59755 |
|  61533 |
|  62123 |
| 143919 |
| 130431 |
|  53776 |
| 106564 |
|  65104 |
| 141217 |
| 127857 |
| 101962 |
| 103239 |
|  62766 |
| 132335 |
|  62610 |
|  93814 |
|  75002 |
| 122769 |
|  90626 |
|  88623 |
| 132719 |
|  93092 |
|  92484 |
| 143905 |
| 148772 |
|  58193 |
|  97497 |
| 114627 |
| 145752 |
|  53189 |
|  69120 |
| 135571 |
|  53725 |
|  83398 |
|  95051 |
| 109821 |
|  77606 |
|  55106 |
| 118614 |
| 142909 |
| 136813 |
|  91649 |
| 127740 |
| 148565 |
| 101107 |
| 132123 |
|  52567 |
|  53574 |
| 139343 |
|  75059 |
|  74699 |
|  65113 |
| 136918 |
|  59934 |
| 114739 |
|  56001 |
|  68115 |
| 132301 |
| 116903 |
| 120235 |
|  71511 |
|  60067 |
|  75153 |
|  52940 |
| 130889 |
| 119069 |
|  62090 |
|  92194 |
| 116599 |
| 145027 |
| 105287 |
| 103301 |
|  69267 |
| 119555 |
|  64055 |
|  93747 |
|  80838 |
|  72570 |
|  59103 |
|  75620 |
| 138948 |
| 108738 |
|  96864 |
|  74688 |
|  86825 |
| 107052 |
|  66393 |
|  55954 |
| 119844 |
|  69869 |
| 109067 |
|  55539 |
|  94247 |
|  69490 |
|--------|

*** The code

First, a function which calculates the fuel required for a given mass.
Later (in part 2) this calculation becomes more realistic,
hence we name this block ~naive-fuel-required~.
For now, we only need divide the mass by three, rounding down
(which is the default behaviour for integer division, but we truncate
the result in case one of the masses happens to be non-integer)
and then subtract 2.
#+name: naive-fuel-required
#+begin_src emacs-lisp
(defun fuel-required (mass)
  (let ((⌊mass/3⌋ (truncate (/ mass 3))))
    (- ⌊mass/3⌋ 2)))
#+end_src

Above, I have saved my personal input as an Org table.
Since the input is stored in rows, it will be imported as a list of
singleton lists, so we need to flatten it.
#+name: flatten
#+begin_src emacs-lisp
(defun flatten (list-of-list)
  (mapcar 'car list-of-list))
#+end_src

Once we've calculated the list of fuel requirements, we'll need to
sum them together; this is easily enough done by applying ~+~ to the list.
#+name: sum
#+begin_src emacs-lisp
(defun sum (l)
  (apply '+ l))
#+end_src

Now we just put the pieces together with a ~map~, or in ~elisp~ lingo,
a ~mapcar~.
#+begin_src emacs-lisp :var input=my-day1-input :noweb yes
<<naive-fuel-required>>
<<flatten>>
<<sum>>

(sum (mapcar 'fuel-required (flatten input)))
#+end_src

#+RESULTS:
: 3159380

** Part 2

*** The narrative

During the second Go / No Go poll, the Elf in charge of the Rocket Equation
Double-Checker stops the launch sequence. Apparently, you forgot to include
additional fuel for the fuel you just added.

Fuel itself requires fuel just like a module - take its mass, divide by three,
round down, and subtract 2. However, that fuel also requires fuel, and that
fuel requires fuel, and so on. Any mass that would require negative fuel
should instead be treated as if it requires zero fuel; the remaining mass,
if any, is instead handled by wishing really hard, which has no mass and is
outside the scope of this calculation.

So, for each module mass, calculate its fuel and add it to the total.
Then, treat the fuel amount you just calculated as the input mass and repeat
the process, continuing until a fuel requirement is zero or negative.
For example:

- A module of mass 14 requires 2 fuel. This fuel requires no further fuel
  (2 divided by 3 and rounded down is 0, which would call for a negative fuel),
  so the total fuel required is still just 2.
- At first, a module of mass 1969 requires 654 fuel. Then, this fuel requires
  216 more fuel (654 / 3 - 2). 216 then requires 70 more fuel, which requires
  21 fuel, which requires 5 fuel, which requires no further fuel.
  So, the total fuel required for a module of mass 1969 is
  654 + 216 + 70 + 21 + 5 = 966.
- The fuel required by a module of mass 100756 and its fuel is:
  33583 + 11192 + 3728 + 1240 + 411 + 135 + 43 + 12 + 2 = 50346.

What is the sum of the fuel requirements for all of the modules on your
spacecraft when also taking into account the mass of the added fuel?
(Calculate the fuel requirements for each module separately,
then add them all up at the end.)

*** The solution

For the most part, the solution remains the same;
the only difference is that ~fuel-required~ involves a recursive call
to calculate the fuel needed for the fuel.
#+name: real-fuel-required
#+begin_src emacs-lisp
(defun fuel-required (mass)
  (let ((⌊mass/3⌋ (truncate (/ mass 3))))
    (let ((required (- ⌊mass/3⌋ 2)))
      (if (> required 0)
        ; if required fuel is positive, add the amount required for that fuel
        (+ required (fuel-required required))
        ; else, if required fuel is zero or negative, just report 0
        '0))))
#+end_src

Combining with the remainder of the solution from above:
#+begin_src emacs-lisp :var input=my-input :noweb yes
<<real-fuel-required>>
<<flatten>>
<<sum>>

(sum (mapcar 'fuel-required (flatten input)))
#+end_src

#+RESULTS:
: 4736213

* Day 2 – 1202 Program Alarm

** Part 1

*** The narrative

On the way to your gravity assist around the Moon, your ship computer beeps angrily about a "1202 program alarm". On the radio, an Elf is already explaining how to handle the situation: "Don't worry, that's perfectly norma--" The ship computer bursts into flames.

You notify the Elves that the computer's magic smoke seems to have escaped. "That computer ran Intcode programs like the gravity assist program it was working on; surely there are enough spare parts up there to build a new Intcode computer!"

An Intcode program is a list of integers separated by commas (like 1,0,0,3,99). To run one, start by looking at the first integer (called position 0). Here, you will find an opcode - either 1, 2, or 99. The opcode indicates what to do; for example, 99 means that the program is finished and should immediately halt. Encountering an unknown opcode means something went wrong.

Opcode 1 adds together numbers read from two positions and stores the result in a third position. The three integers immediately after the opcode tell you these three positions - the first two indicate the positions from which you should read the input values, and the third indicates the position at which the output should be stored.

For example, if your Intcode computer encounters 1,10,20,30, it should read the values at positions 10 and 20, add those values, and then overwrite the value at position 30 with their sum.

Opcode 2 works exactly like opcode 1, except it multiplies the two inputs instead of adding them. Again, the three integers after the opcode indicate where the inputs and outputs are, not their values.

Once you're done processing an opcode, move to the next one by stepping forward 4 positions.

For example, suppose you have the following program:

1,9,10,3,2,3,11,0,99,30,40,50
For the purposes of illustration, here is the same program split into multiple lines:

1,9,10,3,
2,3,11,0,
99,
30,40,50
The first four integers, 1,9,10,3, are at positions 0, 1, 2, and 3. Together, they represent the first opcode (1, addition), the positions of the two inputs (9 and 10), and the position of the output (3). To handle this opcode, you first need to get the values at the input positions: position 9 contains 30, and position 10 contains 40. Add these numbers together to get 70. Then, store this value at the output position; here, the output position (3) is at position 3, so it overwrites itself. Afterward, the program looks like this:

1,9,10,70,
2,3,11,0,
99,
30,40,50
Step forward 4 positions to reach the next opcode, 2. This opcode works just like the previous, but it multiplies instead of adding. The inputs are at positions 3 and 11; these positions contain 70 and 50 respectively. Multiplying these produces 3500; this is stored at position 0:

3500,9,10,70,
2,3,11,0,
99,
30,40,50
Stepping forward 4 more positions arrives at opcode 99, halting the program.

Here are the initial and final states of a few more small programs:

1,0,0,0,99 becomes 2,0,0,0,99 (1 + 1 = 2).
2,3,0,3,99 becomes 2,3,0,6,99 (3 * 2 = 6).
2,4,4,5,99,0 becomes 2,4,4,5,99,9801 (99 * 99 = 9801).
1,1,1,4,99,5,6,0,99 becomes 30,1,1,4,2,5,6,0,99.
Once you have a working computer, the first step is to restore the gravity assist program (your puzzle input) to the "1202 program alarm" state it had just before the last computer caught fire. To do this, before running the program, replace position 1 with the value 12 and replace position 2 with the value 2. What value is left at position 0 after the program halts?

*** The input

#+name: my-day2-input
#+begin_src emacs-lisp
"1,0,0,3,1,1,2,3,1,3,4,3,1,5,0,3,2,1,10,19,2,9,19,23,2,23,10,27,1,6,27,31,1,31,6,35,2,35,10,39,1,39,5,43,2,6,43,47,2,47,10,51,1,51,6,55,1,55,6,59,1,9,59,63,1,63,9,67,1,67,6,71,2,71,13,75,1,75,5,79,1,79,9,83,2,6,83,87,1,87,5,91,2,6,91,95,1,95,9,99,2,6,99,103,1,5,103,107,1,6,107,111,1,111,10,115,2,115,13,119,1,119,6,123,1,123,2,127,1,127,5,0,99,2,14,0,0"
#+end_src

*** The code

#+name: int-code-comp
#+begin_src emacs-lisp
(defun int-code-comp (codes pos)
  (when (and (<= (+ pos 4) (length codes)))
    (let ((code         (nth pos codes))
          (operand1-pos (nth (+ pos 1) codes))
          (operand2-pos (nth (+ pos 2) codes))
          (result-pos   (nth (+ pos 3) codes)))
      ;; If the code is 99, immediately halt
      (when (/= code 99)
        ;; Otherwise, the code should be 1 or 2 (IMPROVE: check that)
        ;; 1 indicates +, 2 indicates *, and the operand and the
        ;; position to store the result we've already calculated.
        (let ((operator (cond ((= code 1) '+)
                              ((= code 2) '*)))
              (operand1   (nth operand1-pos codes))
              (operand2   (nth operand2-pos codes))
              (result-cdr (nthcdr result-pos codes)))
          (print operator)
          (setcar result-cdr (apply operator (list operand1 operand2))))
          (int-code-comp codes (+ pos 4)))))
  codes) ;; return the list
#+end_src

We do need to carefully read the instructions; on first pass,
(in addition to forgetting about opcode 99 indicating termination above)
I missed the instructions to replace the elements at positions 1 and 2 with
with 12 and 02 respectively.
#+begin_src emacs-lisp :var input=my-day2-input :noweb yes
<<int-code-comp>>

(let ((codes (mapcar 'string-to-number (split-string input ","))))
  (setcar (cdr codes)       12)
  (setcar (cdr (cdr codes)) 02)
  (let ((resulting-codes
          (int-code-comp codes 0)))
    ;; Get the head of the resulting codes
    (car resulting-codes)))
#+end_src

#+RESULTS:
: 3716250

** Part 2

*** The narrative

"Good, the new computer seems to be working correctly! Keep it nearby during
this mission - you'll probably use it again. Real Intcode computers support
many more features than your new one, but we'll let you know what they are as
you need them."

"However, your current priority should be to complete your gravity assist
around the Moon. For this mission to succeed, we should settle on some
terminology for the parts you've already built."

Intcode programs are given as a list of integers; these values are used as the
initial state for the computer's memory. When you run an Intcode program, make
sure to start by initializing memory to the program's values. A position in
memory is called an address (for example, the first value in memory is at
"address 0").

Opcodes (like 1, 2, or 99) mark the beginning of an instruction. The values
used immediately after an opcode, if any, are called the instruction's
parameters. For example, in the instruction 1,2,3,4, 1 is the opcode; 2, 3,
and 4 are the parameters. The instruction 99 contains only an opcode and has
no parameters.

The address of the current instruction is called the instruction pointer;
it starts at 0. After an instruction finishes, the instruction pointer
increases by the number of values in the instruction; until you add more
instructions to the computer, this is always 4 (1 opcode + 3 parameters)
for the add and multiply instructions. (The halt instruction would increase
the instruction pointer by 1, but it halts the program instead.)

"With terminology out of the way, we're ready to proceed. To complete the
gravity assist, you need to determine what pair of inputs produces the output
19690720."

The inputs should still be provided to the program by replacing the values at
addresses 1 and 2, just like before. In this program, the value placed in
address 1 is called the noun, and the value placed in address 2 is called the
verb. Each of the two input values will be between 0 and 99, inclusive.

Once the program has halted, its output is available at address 0, also just
like before. Each time you try a pair of inputs, make sure you first reset
the computer's memory to the values in the program (your puzzle input) - in
other words, don't reuse memory from a previous attempt.

Find the input noun and verb that cause the program to produce the
output 19690720. What is 100 * noun + verb? (For example, if noun=12 and
verb=2, the answer would be 1202.)

*** The code

First, we wrap the code used to run the IntCode Computer from the first task
in a function.
#+name: run-icc
#+begin_src emacs-lisp :noweb yes
<<int-code-comp>>

(defun run-icc-on-inputs (input noun verb)
  (let ((codes (mapcar 'string-to-number (split-string input ","))))
    (setcar (cdr codes)       noun)
    (setcar (cdr (cdr codes)) verb)
    (let ((resulting-codes
            (int-code-comp codes 0)))
      ;; Get the head of the resulting codes
      (car resulting-codes))))
#+end_src

Then we search for the correct inputs.
Since the only operations of the machine are addition and multiplication,
~run-icc-on-inputs~ should be an increasing function,
and we can use a binary search. But since there are two arguments,
and the relationship between those arguments is unknown,
we have to adjust the strategy a bit. We work in stages,
starting from stage ~0~. At stage ~i~,
we fix ~noun~ at ~i~, and perform a binary search for an upper bound
to ~verb~ (between the ~i~ and ~verb~'s old upper bound).
We do the same for ~verb~, and then move to the next stage
with new upper bounds.
This way we decrease the amount of work at each stage
(since the upper limit is changing).

#+name: binary-search-le
#+begin_src emacs-lisp
(defun binary-search<= (f goal low high)
  "A binary search for the greatest number between low and high
   which is still less than f of goal.
   Returns nil if no such number exists."

  (print (format "Searching for %d between %d and %d" goal low high))

  (if (= low high)
      ;; case low = high
      (if (<= goal (apply f (list low)))
          low
          nil) ;; goal was impossible; low it too high
      ;; case low ≠ high
      (let ((mid (+ low (/ (- high low) 2))))
        (let ((at-mid (apply f (list mid))))
          (if (< goal at-mid)
              (binary-search<= f goal low (- mid 1))
              (if (> goal at-mid)
                  (binary-search<= f goal (+ mid 1) high)
                  mid)))))) ;; Found it.
#+end_src

A test.
#+begin_src emacs-lisp :noweb yes
<<binary-search-le>>

(binary-search<= (lambda (x) x) 10 0 100)
#+end_src

#+name: binary-binary-search-eq
#+begin_src emacs-lisp :noweb yes
<<binary-search-le>>

(defun binary-binary-search= (f goal i uplim1 uplim2)

  ;; Found the goal
  (when (= goal (apply f (list uplim1 uplim2)))
    (return (list uplim1 uplim2)))

  ;; For safety, we should also check that it's still possible
  ;; to find the goal. If (f i i) is too high,
  ;; we've failed.
  (when (> goal (apply f (list i i)))
    (return nil))

  ;; Use two binary searches to find new upper limits,
  ;; increment i and search again.
  (let ((f1 (lambda (guess) (apply f (list guess i))))
        (f2 (lambda (guess) (apply f (list i guess)))))
    (let ((next-uplim1 (binary-search<= f1 goal i uplim1))
          (next-uplim2 (binary-search<= f2 goal i uplim2)))
      (binary-binary-search= f goal (+ i 1) next-uplim1 next-uplim2))))
#+end_src

#+begin_src emacs-lisp :noweb yes
<<run-icc>>
<<binary-binary-search-eq>>

(let ((goal 19690720))
  (binary-binary-search= 'run-icc-on-inputs goal 0 99 99))
#+end_src
